import sys, re, os, optparse

VALIDATION_ERROR_CODE = 100

class ValidationException(BaseException):
    """
    A validation error.
    """
    pass


def execute():
    try:
        inputDir, outputDir = collectAndValidateCliArgs()
        
        origFile = inputDir + "/" + os.listdir(inputDir)[0]
        formattedFile = outputDir + "/formatted_genelist.txt"

        create_formatted_genelist_file(origFile, formattedFile)
        validate_genelist(formattedFile)         

    except ValidationException as e:
        print(e, file=sys.stdout) # validation error must go to STDOUT, to ship to user
        sys.exit(VALIDATION_ERROR_CODE)
          
        
def collectAndValidateCliArgs():
    (options, args) = optparse.OptionParser().parse_args()
    if len(args) < 2:
        usage = """
Usage: {} input_dir output_dir
Prepare and validate a dataset for import.
input_dir must contain the original dataset files, and no other files.
output_dir will contain the import-ready set of files.  
If there is a validation error, exit with status {}.  STDOUT will contain the user-appropriate validation error message""".format(sys.argv[0], VALIDATION_ERROR_CODE)
        print(usage, file=sys.stderr)
        exit(-1)
        
    inputDir = args[0]
    outputDir = args[1]

    if not (os.path.isdir(inputDir) and len(os.listdir(inputDir)) == 1):
        raise Exception("input_dir must exist and contain exactly one file.")

    if not (os.path.isdir(outputDir) and len(os.listdir(outputDir)) == 0):
        raise Exception("output_dir must exist and be empty.")

    return inputDir, outputDir

        
def create_formatted_genelist_file(origGeneListFile, outputFormattedFile):
    """
        Formats the input gene list file, transforming all commas, spaces and tabs to new lines. This enables
        compatibility with dataset lists of genes uploaded as dataset parameters in WDK. The downstream installer
        inserts a gene ID into the database for each line in the file passed to it.
        """
    valid_sep_exp = r"[\s,;]"
    formatted_file = open(outputFormattedFile, 'w')
    first = True
    genes_set = {"initialize_this_set_with_something"}
    genes_count = 0
    with open(origGeneListFile, 'r') as source_file:
        for line in source_file:
            gene_id = line.strip()
            if gene_id != "" and gene_id not in genes_set:
                if not first:
                    formatted_file.write("\n")
                first=False
                formatted_file.write(re.sub(valid_sep_exp, "\n", gene_id))
                genes_set.add(gene_id)
                genes_count += 1
                if genes_count > 1000000:
                    raise ValidationException("Invalid number of genes.  Maximum allowed is 1,000,000")
                    
    formatted_file.close()

def validate_genelist(formattedGeneListFile):
    valid_gene_id_exp = r"[a-zA-Z0-9\(\)\.\:_-]*$"
    max_length = 80

    with open(formattedGeneListFile, 'r') as formatted_file:
        for line in formatted_file:
            gene_id = line.strip()
            if not re.match(valid_gene_id_exp, gene_id):
                raise ValidationException("Invalid character found in Gene identifier " + gene_id + ". Does not conform to pattern" + valid_gene_id_exp)
            if len(line) > max_length:
                raise ValidationException("Gene identifier " + line + " exceeds maximum length of " + str(max_length))
